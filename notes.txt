server shuru karo toh  req aati hai browser se 
server banae ke lie hame http module ki zarurat hoti hai jiske andar fujctin hota hai create server
joki ek arrow function leta hai jisme request aur response hote hai 
req jo browser se aayi 
aur res jo hame bhejna hai server ko 
1)sabse pehle sever ka header set karo aur batao ki kis type ka data ya file bhej re 
2)phir res.write() ko call karo aur file bhej ke res.end() se server band 
phir end mei srver ko listen karwado port par 


// STATUS CODES
ek short message hais server ki taraf se client ko jo batata hau ki kya kaam hua
aur har code ka alag matlab 
ye developer tools mei network tab mei 
500 types of status code 
5 classes 
 1)100-199 information purpose
 2) 200-299 success
 3)300-399  redirect
 4)400-499  client side error like google.com/abcd
 5)500-599 server ki galati like down or crash 
seo optimization mei help karte hai 
re.statusCode(200)
to rediredct ham use karte hai res.setHeader('Location',page-name) aur phir end kyuki ham phir se wrie kar re 
jisse ye rediret ho jata 



//EXPRESS
1)server side logic implemented
2)pre written functions hai basically 
3)const express =require('express') 
iske baad hamara ye express ek object ka naam ho gaya aur aap =express() yaha par aap uss object ka instance
ab ham aap par saare function laga sakte 
app.send("location kaha par bhejna hai" ,(ek call back function jo return karega jo bhi aapka logic hai))
ye status code aur header bhi apne aap set kar deta hai hame set nahi karna padta 
top to bottom chalega aur hamara page response ka bhookha hai 
jaise hi koi response milega baaki neeche ke koi function nahi chalenge 
aur app.use()ke baad koi nahi chalta vo as a default hai 
ham send app.get("page se kya aaya ",(callback function))
aur res se ham bhej sakte hai with send() se koi bhi data aur sendfile() se file 

//HTTP methods 
1)req aur resoponse cyle ka jo protocols follow karti hai 
1)GET-{
    -TO GET data 
    to get all use .find({},callback function)
    sare function ek call back function lete hai 
}
2)POST{
    to send data from front end to backend
}
3)PATCH{
    TO update data 
}
4)Delete{
    to delete data 
}
jo bhi data hai front end se bhejte hai vo req ki body mei jata hai
.json se bhi bhej sakte hai 
to send using post hame ek middleware function ue karna padta hai jo usse json format mei bheje taaki system read kar sake 

//PARAMETERS
AS IT IS DB MEI DATA LEKE SEARCH KRKE LEKE ATE  
//QUERIES
to filter a particular data 
amazon.in/?inphone=13 & gb=256


///API
APPLICATION PROGRAMMING INTERFACE
SUPPORTS MULTIPLE PLATFORM AND LANGUAGE INDIPENDENT


//REST API 
AN API WHICH follow rules
rest is representational state transfer
1)response should be same ireespective of request platform like koi bhi mac windows ya linux
2)routes should be named on the basis of nouns 
3)http ke methods use hone chaie for doing operation on these routes
4)data should always in json format
5)should be stateless matlab ki poori cheezein yaad nahi rakhti jo



//Mounting in express or routing
toh pehle express.Router() ke function ko call karke instance banao aur phir app.use("home root ki yaa jo bhi use karwni phir 
",userrouter ko lo)
phir userrouter.route("/").get(function).patch(function).delete(function).POST(function)


//Signup form 
so sabse peheleroute banao signup form ka 
vo karne ke lie router function ka instnce banao aur fir app.use ko home route batao jaha vo show hoga signup form html vala like 
localhost:3000/auth par 
phir route banao ki jab localhost:3000/auth/signup par jaoge toh signup page aaje 
phir usme 2 req lagengi ek get aur ek post 
get req mei ham signup page mangwaenge apne server se 
aur post req mei ham server par ham req bhejnge login details using axios jo ki ek promise based http client hai jo ek request bhejta hai to 
http to backend 
backend for signup
{
let express=require('express');
let app=express();

const authRouter=express.Router();
app.use(express.json());
app.use("/auth",authRouter);

authRouter
.route('/signup')
.get(getSignup)
.post(postSignup);



function getSignup(req,res){
    res.sendFile("/views/signup.html",{root:__dirname});
}
function postSignup(req,res){
    let obj=req.body;
    console.log('backend',obj);
    res.json({
        message:"user signed up",
        data:obj,
    })
}

app.listen(3000);
}

//front end part for signup
{
    let btn=document.querySelector('input[type=submit]');
    btn.addEventListener('click',async function(e){
        e.preventDefault();
        let usrname=document.querySelector('input[type=text]').value;
        let pass=document.querySelector('input[type=password]').value;

        let res=await axios.post('/auth/signup',{usrname,pass})
        console.log('res',res);
    })
}
//Middleware function 
beech ka kaam karte hai 
server mei req aur res ki cycle ke beec hmei kuch processing hoti hai jaise ki kuch aur function chale before get req se unko kehte hai miidleware
all function in backend is middleware function
aur order agar a ,b,c,d ha toh isi order mei chalenege 
types->{
    1)app.use(----)->global middleware ye line hamesha chalega chahe koi bhi req ho 
    2)app.get()->specific path ye tab chalega jab get request hogi 
}
Benefits->1)error handling 
2)404 pages return karne ke k
3)logger function 
4)app.use(express.json()) jo bhi json data ara hai javascript obj mei convert kardo parse jason to js obj 
-How to use them ->
3 para req res aur next and jo bhi precess ke baad ham next ko call kar dei 
in case of error handling 4 PARAMETERS hota hai 
jub next() ko call hota hai ttoh req aur res aage carry forward hote rehte hai jab tak res na bhej do 



//MONGO DB->
scalable ,robust and helps in loadbalancing ,sharding 
drawback-not able to perform complex trnasactions
joins bhi nahi support nahi karta write nahi karta 
mongoose is wrapper to make us syntax friendly 
X97H4WrVR895ZqSz

sabse pehle mongoose ko require karo 
fir mongoose.connect(db_link) db ki lnk do jaha par hai 
abe ye ek promise deta hai to then lagao aur db pass karo 
fir mongo db atlas par jaao new project add kardo
fir new project mei security par jaao 
fir database user mei jaake data baseuser banao aur pass save karo 
fir network access mei jaao aur vaha se allow all kardo filhal 
fir connect par jao aur aur vaha par new APPLICATION mei jaake connection ka link copy karo
aur use db_link mei paste kardo passske saath 
aur run server 


ab ham db ka schema banenge using mongoose.schema in json format mei like mongoose.schema({name:{type:string,required:true}})
now using this schema ham ek model ya ek ek karke entries banaenge 
model banae ke lie ham use karte hai mongoose.model('naam',schema)
ab user ko hame database mei dalna hai toh ham create ka use karte hai joki ek promise based hota hai toh ham async await use karte
usermode.create(//obj ya data jo banaya )

*CRUD-------->{
    create toh upar dekh chuke hai .create se jo ki ek obj leta hai 

}



//hooks in mongoose-------->{
    pre hooks and post hooks 
    these fire after and before save event occurs in db 
    now agar aisi cheez hai jisse db mei show nahi karna like confirm pass to usse save hone se pehle indefined kar do toh show nahi hogi 
}

//hashing-->{
    use bcrypt lib 
    generate key or salt using bcrypt.genSalt()
    fir hash karo using bcrypt.hash() joki async fincitopn hai 
}

//cookies --->{
    store data in user browser 
    hamare http ki jo cycle hoti hai vo stateless hoti hai toh jab bhi ham scroool karte hai toh dusri req karte hai toh 
    http ko nahi pata hita ki pichli req mei kya hua iss lie ham cookies add karte hai taaki ham server ko bataye paae ki
    login karne ki zrurat nahi hai 
    broserr bhi cookies store karta hai aur server ko bhejta hai 
    pehel cookies set karenege aur phir using setHeader FUNCTION USME set cookies bataienge aur ek koi cookie set kar denege 
    res.cookie se ham set karte hai cookie ki value ko aur phir uske andar ham maxAge aur other thngs set kar sakte hai 
    secure:true and hhtpOnly:true ye hamesha lagani chaie taaki koi frontend se naaccess kar pae cookies hamari

}


///protect route{
    ye bhi ek middle ka function hi likha hai jisme hamne agar login hai to hi sare users hsow kia using cookies 
}
//***JASON WEB TOKENS(JWT)
{
    ek secret key hoti hai backend ke pass 
    3-HEADER ,PAYLOAD AND SIGNATURE
    header ke and hoti hai encryption algo 
    PAYLOAD ke passs hoti ha uniquie id  jo ham daalte hai 
    SIGNATURE ke pass uid secret key + uid + algo
    login ki req aai toh backend ek token banake bhej deta hai browser ko aur browser store kar leta hai 
    ab phir se req bhejta hai toh jwt bhi bhejta hai 
    backend bolta hia ki jo hear bhja vo payload aur khud ki secret key use karke ek naya signature banaya aur phir agar jo frontend se
    signature aya hai aur ye bnaya hua signature agar same hai toh ye user valid hai and send a successfull response 
    ab banane ka tareeka --- ham pehle using database se _id utha ke payload banate hai fir jwt.sign()se ham apna token banate hai jo ki
    3 parameter leta hai 1)payload dusra secret key jo banae aur heaader --- header default set hota hai 
    fir ham cookie banate hai jisme ham token bhej dete hai 
    phir ham apne protect route kyuki JIS NAAM SE HAMNE coookie banai usi mei token bhi hota hai to vo cookie se hi jwt.verify mei bhet hai toh hame 
    true and false result milta hai usi se vo verify kar leta hai 



}

//MVC ARCHITECTURE--{
    it describes your major components 
    defines relationship between those components
    kaafi popular hai 
    debugging is easy collab is easy
    MODEL VIEW CONTROLLER
    a3 models mei divide jo ki upar likhe 
    model<--CONTROLLER-->view
    model--->conatins data and database 
    view-->ke andr hamar gui and frontend
    CONTROLLER-->brain of application sare logic hote hai 
}

jwt.verify hame payload hi return karta hai jiske .payload par hamari id hoti hai 


///FORGET PASSWORD---
reset par click karne par ek new token 
db mei new token save
fir generate new link 
resetpassword/token joki dynamic route hoga 
and send this to email
and update password


//logut
destroy the jwt token then successfull logged out 

// plans
pehle schema banao 
model banao 
export karo 
royes banao CRUD 
ADMIN YA RESTRUANT OWNER HI CHANGE KAR SAKTA 
AUR GET universal


//review plan mei hame plans aur user ko populate karne ke lie ham ek pre hook banake find function par lagate hai ki kabhi bhi 
find call ho toh vo hook chale 
usme ham jo jo entries user schema aur plan schema se chaie vo le aate agar sari chaie to seedha naam daal do nahi toh jo jo 
entries chaie vo ek ek karke eg 
reviewSchema.pre(/^find/, function (next) {
    this.populate({
      path: "user",
      select: "name profileImage"
    }).populate("plan");
    next();
  });
